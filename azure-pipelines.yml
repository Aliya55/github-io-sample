# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# try
trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Bash@3
  name: 'Synopsys_Intelligent_Security_Scan_Stage_IO'
  inputs:
    targetType: 'inline'
    script: |
       echo "Trigger IO"
       ./prescription.sh \ 
        --stage="IO" \
        --io.url=$IO_SERVER_URL \
        --io.token=$IO_ACCESS_TOKEN \
        --scm.type="gitlab" \
        --workflow.url=$WORKFLOW_ENGINE_SERVER_URL \
        --workflow.version=$WORKFLOW_ENGINE_VERSION \
        --polaris.url=$POLARIS_SERVER_URL \
        --polaris.token=$POLARIS_ACCESS_TOKEN \
        --blackduck.url=$BLACKDUCK_SERVER_URL \
        --blackduck.api.token=$BLACKDUCK_ACCESS_TOKEN \
        --scm.owner=$SCM_OWNER \
        --scm.repo.name=$SCM_REPO_NAME \
        --scm.branch.name=$SCM_BRANCH_NAME \
        --gitlab.url=$GITLAB_HOST_URL \
        --gitlab.token=$GITLAB_TOKEN \
        --IS_SAST_ENABLED=$IS_SAST_ENABLED \
        --IS_SCA_ENABLED=$IS_SCA_ENABLED \
        --IS_DAST_ENABLED=$IS_DAST_ENABLED \
        ${ADDITIONALARGS}
      export IS_SAST_ENABLED=$(jq -r '.security.activities.sast.enabled' result.json)
      export IS_SCA_ENABLED=$(jq -r '.security.activities.sca.enabled' result.json)
      echo "IS_SAST_ENABLED=${IS_SAST_ENABLED}" >> scans.env
      echo "IS_SCA_ENABLED=${IS_SCA_ENABLED}" >> scans.env
      rm -rf synopsys-io.yml
      rm -rf synopsys-io.json
      echo "================================== IO Prescription ======================================="
      echo "Is SAST Enabled - ${IS_SAST_ENABLED}"
      echo "Is SCA Enabled - ${IS_SCA_ENABLED}"
      if [ $PERSONA == "devsecops" ]; then
            echo "==================================== IO Risk Score ======================================="
            echo "Buisness Criticality Score - $(jq -r '.riskScoreCard.bizCriticalityScore' result.json)"
            echo "Data Class Score - $(jq -r '.riskScoreCard.dataClassScore' result.json)"
            echo "Access Score - $(jq -r '.riskScoreCard.accessScore' result.json)"
            echo "Open Vulnerability Score - $(jq -r '.riskScoreCard.openVulnScore' result.json)"
            echo "Change Significance Score - $(jq -r '.riskScoreCard.changeSignificanceScore' result.json)"
            export bizScore=$(jq -r '.riskScoreCard.bizCriticalityScore' result.json | cut -d'/' -f2)
            export dataScore=$(jq -r '.riskScoreCard.dataClassScore' result.json | cut -d'/' -f2)
            export accessScore=$(jq -r '.riskScoreCard.accessScore' result.json | cut -d'/' -f2)
            export vulnScore=$(jq -r '.riskScoreCard.openVulnScore' result.json | cut -d'/' -f2)
            export changeScore=$(jq -r '.riskScoreCard.changeSignificanceScore' result.json | cut -d'/' -f2)
            echo -n "Total Score - " && echo "$bizScore + $dataScore + $accessScore + $vulnScore + $changeScore" | bc
      fi

- task: Bash@3
  name: 'Print_IO_Prescription'
  inputs:
    targetType: 'inline'
    script: |
       echo "is_sast_enabled $(is_sast_enabled)"
       echo "is_sca_enabled $(is_sca_enabled)"
       
- task: Bash@3
  name: 'Static_Analysis_With_Polaris'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      export POLARIS_SERVER_URL=$(POLARIS_SERVER_URL)
      export POLARIS_ACCESS_TOKEN=$(POLARIS_ACCESS_TOKEN)
      wget -q $(POLARIS_SERVER_URL)/api/tools/polaris_cli-linux64.zip
      unzip -j polaris_cli-linux64.zip -d /tmp
      /tmp/polaris analyze -w

- task: Bash@3
  name: 'Synopsys_Intelligent_Security_Scan_Stage_WORKFLOW'
  inputs:
    targetType: 'inline'
    script: |
       echo "Trigger IO Workflow"
       ./prescription.sh \
        --stage="WORKFLOW" \
        --persona=$PERSONA \
        --io.url=$IO_SERVER_URL \
        --io.token=$IO_ACCESS_TOKEN \
        --io.manifest.url=$IO_MANIFEST_URL \
        --manifest.type=$MANIFEST_TYPE \
        --asset.id=$ASSET_ID \
        --workflow.url=$WORKFLOW_ENGINE_SERVER_URL \
        --workflow.version=$WORKFLOW_ENGINE_VERSION \
        --polaris.url=$POLARIS_SERVER_URL \
        --polaris.token=$POLARIS_ACCESS_TOKEN \
        --blackduck.url=$BLACKDUCK_SERVER_URL \
        --blackduck.api.token=$BLACKDUCK_ACCESS_TOKEN \
        --IS_SAST_ENABLED=$IS_SAST_ENABLED \
        --IS_SCA_ENABLED=$IS_SCA_ENABLED \
        --IS_DAST_ENABLED=$IS_DAST_ENABLED \
        ${ADDITIONALARGS}
      echo "Triggering WorkFlowEngine "
      - >
          if [ $MANIFEST_TYPE == "yml" ]; then
            java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.yml
          elif [ $MANIFEST_TYPE == "json" ]; then
            java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.json
          fi
      rm -rf synopsys-io.yml
      rm -rf synopsys-io.json
      echo "========================== IO WorkflowEngine Summary ============================" 
      echo "Breaker Status - $(jq -r '.breaker.status' wf-output.json)"

- task: CopyFiles@2
  name: 'Copy_Sarif_Report'
  inputs:
    Contents: 'workflowengine-results.sarif'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  name: 'Publish_Sarif_Report'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'CodeAnalysisLogs'
    publishLocation: 'Container'
