# Synopsys IO Azure Pipeline
trigger:
- master

jobs:
  - job: Synopsys_IO_Scan
    pool:
      vmImage: ubuntu-latest

    variables:
      PERSONA: devsecops
      RELEASE: minor
      MANIFEST_TYPE: yml
      BD_PROJECT_NAME: "devsecops-test/github-io-sample"
      BLACKDUCK_PROJECT_VERSION: 1.0
      SYNOPSYS_AZURE_TOOLS_REPO: https://github.com/synopsys-sig-community/synopsys-azure-tools

    steps:
    - task: Bash@3
      displayName: Synopsys IO Stage
      name: 'Stage_IO'
      inputs:
        targetType: 'inline'
        script: |
          echo "Trigger IO"
          wget "https://raw.githubusercontent.com/synopsys-sig/io-artifacts/2021.12.0-alpha-2/prescription.sh"
          chmod +x prescription.sh
          ./prescription.sh --release.type="$(RELEASE)" --persona="$(PERSONA)" --stage="IO" --io.url="$(IO_SERVER_URL)" --io.token="$(IO_ACCESS_TOKEN)" \
          --workflow.url="$(WORKFLOW_ENGINE_SERVER_URL)" --codedx.api.key="$(CODEDX_API_KEY)" \
            --asset.id="devsecops-test/github-io-sample" --scm.type="github" --scm.owner="devsecops-test" --scm.repo.name="github-io-sample" --scm.branch.name="master" \
            ${ADDITIONALARGS}
          export IS_SAST_ENABLED=$(jq -r '.security.activities.sast.enabled' result.json)
          export IS_SCA_ENABLED=$(jq -r '.security.activities.sca.enabled' result.json)
          echo "##vso[task.setvariable variable=IS_SAST_ENABLED]$(jq -r '.security.activities.sast.enabled' result.json)"
          echo "##vso[task.setvariable variable=IS_SCA_ENABLED]$(jq -r '.security.activities.sca.enabled' result.json)"
          echo "\n================================ Raw IO Prescription ====================================="
          cat result.json
          rm -rf synopsys-io.yml
          rm -rf synopsys-io.json
          echo "\n================================ AST IO Prescription ====================================="
          echo "Is SAST Enabled - ${IS_SAST_ENABLED}"
          echo "Is SCA Enabled - ${IS_SCA_ENABLED}"
          if [ "$(PERSONA)" == "devsecops" ]; then
              echo "==================================== IO Risk Score ======================================="
              echo "Buisness Criticality Score - $(jq -r '.riskScoreCard.bizCriticalityScore' result.json)"
              echo "Data Class Score - $(jq -r '.riskScoreCard.dataClassScore' result.json)"
              echo "Access Score - $(jq -r '.riskScoreCard.accessScore' result.json)"
              echo "Open Vulnerability Score - $(jq -r '.riskScoreCard.openVulnScore' result.json)"
              echo "Change Significance Score - $(jq -r '.riskScoreCard.changeSignificanceScore' result.json)"
              export bizScore=$(jq -r '.riskScoreCard.bizCriticalityScore' result.json | cut -d'/' -f2)
              export dataScore=$(jq -r '.riskScoreCard.dataClassScore' result.json | cut -d'/' -f2)
              export accessScore=$(jq -r '.riskScoreCard.accessScore' result.json | cut -d'/' -f2)
              export vulnScore=$(jq -r '.riskScoreCard.openVulnScore' result.json | cut -d'/' -f2)
              export changeScore=$(jq -r '.riskScoreCard.changeSignificanceScore' result.json | cut -d'/' -f2)
              echo -n "Total Score - " && echo "$bizScore + $dataScore + $accessScore + $vulnScore + $changeScore" | bc
          fi
    
    - task: Bash@3
      displayName: Static Analysis With Polaris
      name: 'SAST_With_Polaris'
      condition: eq(variables['IS_SAST_ENABLED'], 'true')
      inputs:
        targetType: 'inline'
        script: |
          export POLARIS_SERVER_URL=$(POLARIS_SERVER_URL)
          export POLARIS_ACCESS_TOKEN=$(POLARIS_ACCESS_TOKEN)
          wget -q $(POLARIS_SERVER_URL)/api/tools/polaris_cli-linux64.zip
          unzip -j polaris_cli-linux64.zip -d /tmp
          /tmp/polaris analyze -w
      
    - task: Bash@3
      displayName: Software Composition Analysis with Blackduck
      name: 'SCA_With_BlackDuck'
      condition: eq(variables['IS_SCA_ENABLED'], 'true')
      inputs:
        targetType: 'inline'
        script: |
          pwd && wget "https://detect.synopsys.com/detect.sh" && chmod +x detect.sh
          ./detect.sh --blackduck.url="$(BLACKDUCK_SERVER_URL)" --blackduck.api.token="$(BLACKDUCK_ACCESS_TOKEN)" \
            --detect.tools="SIGNATURE_SCAN,DETECTOR" --detect.project.name="$(BD_PROJECT_NAME)" --detect.project.version.name="$(BLACKDUCK_PROJECT_VERSION)" \
            --detect.code.location.name="$(BD_PROJECT_NAME)-$(BLACKDUCK_PROJECT_VERSION)" --logging.level.com.synopsys.integration="INFO" $ADDITIONAL_BD_ARGS

    - task: Bash@3
      displayName: Synopsys IO Workflow Stage
      name: 'Stage_Workflow'
      condition: or(eq(variables['IS_SAST_ENABLED'], 'true'), eq(variables['IS_SCA_ENABLED'], 'true'))
      inputs:
        targetType: 'inline'
        script: |
          echo "Trigger IO Workflow"
          wget "https://github.com/synopsys-sig/io-artifacts/releases/download/2021.12.0-alpha-2/WorkflowClient.jar"
          chmod +x WorkflowClient.jar
          ./prescription.sh --stage="WORKFLOW" --io.url=$(IO_SERVER_URL) --io.token=$(IO_ACCESS_TOKEN) --workflow.url=$(WORKFLOW_ENGINE_SERVER_URL) \
          --polaris.token=$(POLARIS_ACCESS_TOKEN) --blackduck.api.token=$(BLACKDUCK_ACCESS_TOKEN) \
          --msteams.webhook.url=$(TEAMS_WEBHOOK_URL) --codedx.api.key=$(CODEDX_API_KEY) \
          --IS_SAST_ENABLED=$(IS_SAST_ENABLED) --IS_SCA_ENABLED=$(IS_SCA_ENABLED) --IS_DAST_ENABLED=$(IS_DAST_ENABLED)
          echo "Triggering WorkFlowEngine "
          if [ $(MANIFEST_TYPE) == "yml" ]; then
              java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.yml
          elif [ $(MANIFEST_TYPE) == "json" ]; then
              java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.json
          fi
          rm -rf synopsys-io.yml
          rm -rf synopsys-io.json
          echo "========================== IO WorkflowEngine Summary ============================" 
          echo "Breaker Status - $(jq -r '.breaker.status' wf-output.json)"
          echo "CodeDX Score - $(jq -r '.breaker.criteria[2].risk_score' wf-output.json)"

    - task: CopyFiles@2
      displayName: Copy Sarif Report
      name: 'Copy_Sarif_Report'
      condition: eq(variables['IS_SAST_ENABLED'], 'true')
      inputs:
        Contents: 'workflowengine-results.sarif'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Sarif Report
      name: 'Publish_Sarif_Report'
      condition: eq(variables['IS_SAST_ENABLED'], 'true')
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'CodeAnalysisLogs'
        publishLocation: 'Container'
        
    - task: UsePythonVersion@0
      name: pyTools
      displayName: Get Python Interpreter
      condition: eq(variables['IS_SAST_ENABLED'], 'true')
      inputs:
        versionSpec: '3.7'
        addToPath: true

    - script: $(pyTools.pythonLocation)/bin/pip install --upgrade pandas requests jsonapi_requests azure-devops
      displayName: Install Python Module Dependencies
      condition: eq(variables['IS_SAST_ENABLED'], 'true')

    - script: |
            git clone -q --depth 1 $SYNOPSYS_AZURE_TOOLS_REPO
            $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-issues-tool.py --url $POLARIS_URL --token $POLARIS_ACCESS_TOKEN --new --az-work-items --project "sig-devsecops/github-io-sample" --branch "origin/master"
      displayName: Create Work Items for New Issues
      condition: eq(variables['IS_SAST_ENABLED'], 'true')
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        POLARIS_URL: $(POLARIS_SERVER_URL)
        POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)
