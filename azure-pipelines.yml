# Azure DevOps Pipeline with Synopsys IO

# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - main
      - devsecops

variables:
      # IO
      PERSONA: devsecops
      RELEASE: major
      PROJECT_NAME: iRecruitMobile

      # SCM
      SCM_TYPE: github
      SCM_OWNER: io-poc
      SCM_REPO_NAME: poc-38-mobile
      SCM_BRANCH_NAME: main

      # JIRA
      JIRA_ASSIGNEE: neil
      JIRA_ISSUE_TYPE: BUG
      JIRA_ISSUE_QUERY: "resolution=Unresolved"
      JIRA_PROJECT_KEY: IRMOB
      JIRA_PROJECT_NAME: IRMOB

      # Code Dx
      CODEDX_PROJECT_ID: 5

      # AST - SCA - Black Duck
      BLACKDUCK_PROJECT_NAME: iRecruitMobile
      BLACKDUCK_PROJECT_VERSION: 7.0.2

pool:
  vmImage: ubuntu-latest #'$(vmImageMacOs)'

stages:
# - stage: Build
#   jobs:
#   - job: Install
#     displayName: NPM Build And Verify
#     timeoutInMinutes: 0
#     steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '12.13.0'
#       displayName: 'Install Node.js'

#     - script: npm install
#       displayName: 'Install Node Depedencies'

#     - script: npm test -- -u
#       displayName: 'Update test snapshots'

#     - script: npm run test
#       displayName: 'Run Jest'

#     - script: npm run cover
#       displayName: 'Check code coverage'

#     - script: |
#         npm audit
#         if [ $? -ne 0 ]; then
#           exit 0
#         fi
#       displayName: 'Run NPM audit'

#     - script: npm install -g license-checker
#       displayName: 'Install License Checker'

#     - script: npm install yui-lint
#       displayName: 'Install yui lint'

#     - script: license-checker --summary
#       displayName: 'License Summary List'

- stage: Prescription
  jobs:
  - job: PrescriptionJob
    displayName: IO - Prescription
    timeoutInMinutes: 0
    steps:
    - checkout: none
    - script: |
        echo "Determine prescription from IO"
        wget "https://sigsecure.synopsys.com/link/5Yi7B8XiFhAUaQImOXEuLg/download/io"
        chmod +x io
        ./io --version
        ./io --stage io io.server.url="$(IO_SERVER_URL)" io.server.token="$(IO_ACCESS_TOKEN)" \
          project.name="$(PROJECT_NAME)" project.release.type="$(RELEASE)" persona.type="$(PERSONA)" \
          workflow.engine.url="$(WORKFLOW_ENGINE_SERVER_URL)" \
          scm.type="$(SCM_TYPE)" scm.owner="$(SCM_OWNER)" scm.repository.name="$(SCM_REPO_NAME)" scm.repository.branch.name="$(SCM_BRANCH_NAME)" \
          github.apiurl="$(GITHUB_API_URL)" github.username="$(GITHUB_USERNAME)" github.token="$(GITHUB_TOKEN)" \
          jira.assignee="$(JIRA_ASSIGNEE)" jira.authtoken="$(JIRA_AUTH_TOKEN)" jira.enable=true jira.hosturl="$(JIRA_HOST_URL)" jira.issuesquery="$(JIRA_ISSUE_QUERY)" jira.issuetype="$(JIRA_ISSUE_TYPE)" jira.project.key="$(JIRA_PROJECT_KEY)" jira.project.name="$(JIRA_PROJECT_NAME)" jira.username="$(JIRA_ASSIGNEE)" \
          codedx.instanceurl="$(CODEDX_SERVER_URL)" codedx.apikey="$(CODEDX_API_KEY)" codedx.projectid="$(CODEDX_PROJECT_ID)" \
          slack.bearertoken="$(SLACK_BEARER_TOKEN)" slack.channelidentifier="$(SLACK_CHANNEL_IDENTIFIER)"
        export IO_IQ_RUN_ID=$(jq -r '.data.io.run.id' io_state.json)
        export IS_SAST_ENABLED=$(jq -r '.data.prescription.security.activities.sast.enabled' io_state.json)
        export IS_SASTPLUSM_ENABLED=$(jq -r '.data.prescription.security.activities.sastPlusM.enabled' io_state.json)
        export IS_SCA_ENABLED=$(jq -r '.data.prescription.security.activities.sca.enabled' io_state.json)
        export IS_DAST_ENABLED=$(jq -r '.data.prescription.security.activities.dast.enabled' io_state.json)
        export IS_DASTPLUSM_ENABLED=$(jq -r '.data.prescription.security.activities.dastPlusM.enabled' io_state.json)
        export IS_IMAGESCAN_ENABLED=$(jq -r '.data.prescription.security.activities.imageScan.enabled' io_state.json)
        export IS_CLOUD_ENABLED=$(jq -r '.data.prescription.security.activities.CLOUD.enabled' io_state.json)
        export IS_THREATMODEL_ENABLED=$(jq -r '.data.prescription.security.activities.THREATMODEL.enabled' io_state.json)
        export IS_INFRA_ENABLED=$(jq -r '.data.prescription.security.activities.INFRA.enabled' io_state.json)
        export IS_NETWORK_ENABLED=$(jq -r '.data.prescription.security.activities.NETWORK.enabled' io_state.json)
        echo "##vso[task.setvariable variable=IS_SAST_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.sast.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_SASTPLUSM_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.sastPlusM.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_SCA_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.sca.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_DAST_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.dast.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_DASTPLUSM_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.dastPlusM.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_IMAGESCAN_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.imageScan.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_CLOUD_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.CLOUD.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_THREATMODEL_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.THREATMODEL.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_INFRA_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.INFRA.enabled' io_state.json)"
        echo "##vso[task.setvariable variable=IS_NETWORK_ENABLED;isOutput=true]$(jq -r '.data.prescription.security.activities.NETWORK.enabled' io_state.json)"
        echo
        echo "================================ AST IO Prescription ====================================="
        echo "Should SAST scans be enabled: ${IS_SAST_ENABLED}"
        echo "Should SAST+Manual activities be enabled: ${IS_SASTPLUSM_ENABLED}"
        echo "Should SCA scans be enabled: ${IS_SCA_ENABLED}"
        echo "Should DAST scans be enabled: ${IS_DAST_ENABLED}"
        echo "Should DAST+Manual activities be enabled: ${IS_DASTPLUSM_ENABLED}"
        echo "Should Image Scans be enabled: ${IS_IMAGESCAN_ENABLED}"
        echo "Should Cloud Review be enabled: ${IS_CLOUD_ENABLED}"
        echo "Should Threat Modeling be enabled: ${IS_THREATMODEL_ENABLED}"
        echo "Should Infrastructure Review be enabled: ${IS_INFRA_ENABLED}"
        echo "Should Network scans be enabled: ${IS_NETWORK_ENABLED}"
        echo "=========================================================================================="
        apiURL="${IO_SERVER_URL}"
        apiURL+="${IO_IQ_RUN_API}"
        apiURL+="${IO_IQ_RUN_ID}"
        apiHeader="Authorization: Bearer "
        apiHeader+="$(IO_ACCESS_TOKEN)"
        echo "API call to get IO IQ run details: ${apiURL}"
        iq=$(curl --location --request GET "${apiURL}" --header "${apiHeader}")
        echo "================================ IO Risk Explanation ====================================="
        echo "${iq}" | jq
        echo "=========================================================================================="
        echo
      name: PrescriptionStep
    - publish: io_state.json
      artifact: IOState

- stage: SCA
  jobs:
  - job: BlackDuck
    displayName: SCA - Black Duck
    timeoutInMinutes: 0
    condition: eq(stageDependencies.Prescription.PrescriptionJob.outputs['PrescriptionStep.IS_SCA_ENABLED'], 'true')
    variables:
      doSCA: $[ stageDependencies.Prescription.PrescriptionJob.outputs['PrescriptionStep.IS_SCA_ENABLED'] ]
    steps:
    - download: current
      artifact: IOState
    - script: |
        echo "SCA prescription: $(doSCA)"
        if [[ $doSCA -eq 'true' ]]
        then
          wget "https://sigsecure.synopsys.com/link/5Yi7B8XiFhAUaQImOXEuLg/download/io"
          chmod +x io
          ./io --version
          pwd && wget "https://detect.synopsys.com/detect.sh" && chmod +x detect.sh
          ./detect.sh --blackduck.url="$(BLACK_DUCK_SERVER_URL)" --blackduck.api.token="$(BLACKDUCK_ACCESS_TOKEN)" \
          --detect.tools="SIGNATURE_SCAN,DETECTOR" --detect.project.name="$(BLACKDUCK_PROJECT_NAME)" --detect.project.version.name="$(BLACKDUCK_PROJECT_VERSION)" \
          --detect.code.location.name="$(BLACKDUCK_PROJECT_NAME)-$(BLACKDUCK_PROJECT_VERSION)" --logging.level.com.synopsys.integration="INFO" $ADDITIONAL_BD_ARGS
          ./io --stage execution --state $(Pipeline.Workspace)/IOState/io_state.json \
            blackduck.authtoken="$(BLACKDUCK_ACCESS_TOKEN)" blackduck.instanceurl="$(BLACK_DUCK_SERVER_URL)" blackduck.projectname="$(BLACKDUCK_PROJECT_NAME)" blackduck.projectversion="$(BLACKDUCK_PROJECT_VERSION)" blackduck.scansuccessful=true
        else
          echo "SCA scan skipped due to prescription"
        fi
      name: BlackDuck
    - publish: io_state.json
      artifact: IOStateSCA

- stage: Workflow
  jobs:
  - job: Workflow
    displayName: IO - Workflow
    timeoutInMinutes: 0
    variables:
      doSCA: $[ stageDependencies.Prescription.PrescriptionJob.outputs['PrescriptionStep.IS_SCA_ENABLED'] ]
    steps:
    - download: current
      artifact: IOStateSCA
    - checkout: none
    - script: |
        echo "SCA prescription: $(doSCA)"
        cat $(Pipeline.Workspace)/IOStateSCA/io_state.json
        wget "https://sigsecure.synopsys.com/link/5Yi7B8XiFhAUaQImOXEuLg/download/io"
        chmod +x io
        ./io --version
        ./io --stage workflow --state $(Pipeline.Workspace)/IOStateSCA/io_state.json \
          workflow.engine.version=2022.4.1
        echo "========================== IO WorkflowEngine Summary ============================"
        echo "Breaker Status - $(jq -r '.breaker.status' wf-output.json)"
        echo "========================== IO WorkflowEngine Summary ============================"
      name: Workflow
